"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ OpenAI API –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
–¢–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
"""

import asyncio
import sys
import unittest.mock
from unittest.mock import AsyncMock, MagicMock

from response_generator import ResponseGenerator
from config import OPENAI_API_KEY, OPENAI_MODEL

# –î–æ–ø. –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
import os
import json
import types
import tempfile
from pathlib import Path
from datetime import datetime
from unittest.mock import patch


async def test_config_validation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI."""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    print(f"API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'‚úÖ' if OPENAI_API_KEY else '‚ùå'}")
    print(f"–ú–æ–¥–µ–ª—å: {OPENAI_MODEL}")
    
    if not OPENAI_API_KEY:
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("   –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å: OPENAI_API_KEY=your_key_here")
    else:
        print(f"‚úÖ API –∫–ª—é—á –¥–ª–∏–Ω–æ–π {len(OPENAI_API_KEY)} —Å–∏–º–≤–æ–ª–æ–≤")


async def test_real_api_connection():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞)."""
    print("\n=== –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API ===")
    
    if not OPENAI_API_KEY:
        print("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç API –∫–ª—é—á–∞")
        return
    
    print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI...")
    
    rg = ResponseGenerator()
    if not rg._client:
        print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        response = await rg.generate(
            chat_id=999999,
            user_message="–ü—Ä–∏–≤–µ—Ç",
            profile_context="",
            focus_topic=""
        )
        
        print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: {response}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        if "api_key" in str(e).lower():
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        elif "quota" in str(e).lower():
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞")
        elif "model" in str(e).lower():
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ–ª—å")
        return False


async def test_api_with_full_context():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
    print("\n=== –¢–µ—Å—Ç API —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ===")
    
    if not OPENAI_API_KEY:
        print("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç API –∫–ª—é—á–∞")
        return
    
    rg = ResponseGenerator()
    if not rg._client:
        print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        response = await rg.generate(
            chat_id=888888,
            user_message="–†–∞—Å—Å–∫–∞–∑–∞–ª –±—ã –æ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö",
            profile_context="–î–µ–≤—É—à–∫–∞ 25 –ª–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏",
            focus_topic="—Ö–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã",
            summary_text="–û–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–±–æ—Ç—É –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
            system_goal="—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö"
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {response}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = rg.get_recent_history(888888)
        print(f"üìù –ò—Å—Ç–æ—Ä–∏—è: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_basic_generation():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–∫–æ–º OpenAI."""
    print("=== –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ—Ç–≤–µ—Ç–∞
    mock_response = MagicMock()
    mock_response.output_text = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!"
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    mock_client = AsyncMock()
    mock_client.responses.create = AsyncMock(return_value=mock_response)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    rg = ResponseGenerator()
    rg._client = mock_client
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    response = await rg.generate(
        chat_id=12345,
        user_message="–ü—Ä–∏–≤–µ—Ç!",
        profile_context="–õ—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        focus_topic="—Ö–æ–±–±–∏"
    )
    
    print(f"–û—Ç–≤–µ—Ç: {response}")
    print(f"–ò—Å—Ç–æ—Ä–∏—è: {rg.get_recent_history(12345)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_client.responses.create.assert_called_once()
    assert response == "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!"


async def test_fallback_without_client():
    """–¢–µ—Å—Ç —Ñ–æ–ª–±—ç–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    print("\n=== –¢–µ—Å—Ç —Ñ–æ–ª–±—ç–∫–∞ –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞ ===")
    
    rg = ResponseGenerator()
    rg._client = None  # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    
    response = await rg.generate(
        chat_id=67890,
        user_message="–ö–∞–∫ –¥–µ–ª–∞?",
        profile_context="",
        focus_topic=""
    )
    
    print(f"–§–æ–ª–±—ç–∫ –æ—Ç–≤–µ—Ç: {response}")
    print(f"–ò—Å—Ç–æ—Ä–∏—è: {rg.get_recent_history(67890)}")


async def test_history_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("\n=== –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π ===")
    
    rg = ResponseGenerator()
    chat_id = 11111
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    for i in range(5):
        rg.add_to_history(chat_id, "user", f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}")
        rg.add_to_history(chat_id, "assistant", f"–û—Ç–≤–µ—Ç {i}")
    
    history = rg.get_recent_history(chat_id)
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
    print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    for msg in history[-4:]:
        print(f"  {msg['role']}: {msg['content']}")


async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API."""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    # –ú–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    mock_client = AsyncMock()
    mock_client.responses.create = AsyncMock(side_effect=Exception("API Error"))
    
    rg = ResponseGenerator()
    rg._client = mock_client
    
    response = await rg.generate(
        chat_id=99999,
        user_message="–¢–µ—Å—Ç –æ—à–∏–±–∫–∏",
        profile_context="",
        focus_topic=""
    )
    
    print(f"–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ: {response}")
    assert response == "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å?"


async def test_complex_context():
    """–¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
    print("\n=== –¢–µ—Å—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ===")
    
    mock_response = MagicMock()
    mock_response.output_text = "–ü–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ IT –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–π. –ö–∞–∫ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π?"
    
    mock_client = AsyncMock()
    mock_client.responses.create = AsyncMock(return_value=mock_response)
    
    rg = ResponseGenerator()
    rg._client = mock_client
    
    response = await rg.generate(
        chat_id=55555,
        user_message="–°–µ–≥–æ–¥–Ω—è –±—ã–ª —Ç—è–∂–µ–ª—ã–π –¥–µ–Ω—å –Ω–∞ —Ä–∞–±–æ—Ç–µ",
        profile_context="–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º, –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏ –∏ –∫–æ—Ñ–µ",
        focus_topic="—Ä–∞–±–æ—Ç–∞ –∏ —Å—Ç—Ä–µ—Å—Å",
        summary_text="–û–±—Å—É–∂–¥–∞–ª–∏ –∫–∞—Ä—å–µ—Ä—É –≤ IT",
        system_goal="–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –≤—ã—è—Å–Ω–∏—Ç—å —Å–ø–æ—Å–æ–±—ã —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏"
    )
    
    print(f"–û—Ç–≤–µ—Ç: {response}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–ª–∏—Å—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    call_args = mock_client.responses.create.call_args
    instructions = call_args.kwargs['instructions']
    print(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç:")
    print(f"  - –ü—Ä–æ—Ñ–∏–ª—å: {'–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º' in instructions}")
    print(f"  - –§–æ–∫—É—Å: {'—Ä–∞–±–æ—Ç–∞ –∏ —Å—Ç—Ä–µ—Å—Å' in instructions}")
    print(f"  - –°–≤–æ–¥–∫–∞: {'–∫–∞—Ä—å–µ—Ä—É –≤ IT' in instructions}")
    print(f"  - –¶–µ–ª—å: {'–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å' in instructions}")


async def test_conversation_flow():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    print("\n=== –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ===")
    
    # –†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    responses = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?",
        "–ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º?",
        "–ü–æ–Ω–∏–º–∞—é. –ê –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?"
    ]
    
    mock_client = AsyncMock()
    rg = ResponseGenerator()
    rg._client = mock_client
    
    chat_id = 77777
    user_messages = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–•–æ—Ä–æ—à–æ, —Å–µ–≥–æ–¥–Ω—è –∏–∑—É—á–∞–ª –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
        "–ü–ª–∞–Ω–∏—Ä—É—é –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"
    ]
    
    for i, user_msg in enumerate(user_messages):
        mock_response = MagicMock()
        mock_response.output_text = responses[i]
        mock_client.responses.create = AsyncMock(return_value=mock_response)
        
        response = await rg.generate(
            chat_id=chat_id,
            user_message=user_msg,
            profile_context="IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            focus_topic="—Ö–æ–±–±–∏"
        )
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_msg}")
        print(f"–ë–æ—Ç: {response}")
        print()
    
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è ({len(rg.get_recent_history(chat_id))} —Å–æ–æ–±—â–µ–Ω–∏–π):")
    for msg in rg.get_recent_history(chat_id):
        role_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == "user" else "–ë–æ—Ç"
        print(f"  {role_name}: {msg['content']}")


async def test_conversation_initiator_time_of_day_and_generate():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ time_of_day() –∏ generate_starter()."""
    print("\n=== –¢–µ—Å—Ç conversation_initiator ===")
    import conversation_initiator as ci

    # –ü–∞—Ç—á–∏–º datetime –≤ –º–æ–¥—É–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    class DummyDT:
        @classmethod
        def now(cls):
            class T: pass
            o = T()
            o.hour = DummyDT._h
            return o

    with patch.object(ci, 'datetime', DummyDT):
        for h, expected in [(6, "—É—Ç—Ä–æ"), (13, "–¥–µ–Ω—å"), (19, "–≤–µ—á–µ—Ä"), (2, "–Ω–æ—á—å")]:
            DummyDT._h = h
            tod = ci.time_of_day()
            print(f"{h}:00 => {tod}")
            assert tod == expected

    # generate_starter –≤—ã–∑—ã–≤–∞–µ—Ç rg.generate —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    class RG:
        def __init__(self):
            self.calls = []
        async def generate(self, **kwargs):
            self.calls.append(kwargs)
            return "starter"

    rg = RG()
    out = await ci.generate_starter(rg, 123, "ctx", "topic")
    assert out == "starter"
    assert rg.calls and rg.calls[0]["chat_id"] == 123
    assert "–∏–Ω–∏—Ü–∏–∞—Ü–∏—è" in rg.calls[0]["user_message"]


async def test_autonomous_manager_tick_and_followup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ AutonomousManager._tick() –∏ plan_followup()."""
    print("\n=== –¢–µ—Å—Ç AutonomousManager ===")
    import autonomous_manager as am

    # –ú–æ–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–µ–≤—É—à–µ–∫
    class G: chat_id = 111
    girls = MagicMock()
    girls.list_girls = AsyncMock(return_value=[G()])
    girls.get_profile_context = AsyncMock(return_value="ctx")
    girls.suggest_focus_topic = AsyncMock(return_value="topic")

    # –ú–æ–∫ RG –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    rg = MagicMock()

    sent = []
    async def send_message(cid, text):
        sent.append((cid, text))

    is_stopping = lambda: False

    mgr = am.AutonomousManager(girls, rg, send_message, is_stopping, send_typing=None)

    with patch.object(am, 'now_allowed_hours', return_value=True), \
         patch('autonomous_manager.random.random', return_value=0.0), \
         patch('autonomous_manager.random.randint', return_value=1), \
         patch('autonomous_manager.generate_starter', new=AsyncMock(return_value='auto_starter')), \
         patch('autonomous_manager.asyncio.sleep', new=AsyncMock()):
        await mgr._tick()
        assert sent and sent[0] == (111, 'auto_starter')
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞
        assert 111 in mgr._last_sent

    # plan_followup
    sent.clear()
    with patch('autonomous_manager.random.random', return_value=0.0), \
         patch('autonomous_manager.random.randint', return_value=1), \
         patch('autonomous_manager.generate_starter', new=AsyncMock(return_value='followup')), \
         patch('autonomous_manager.asyncio.sleep', new=AsyncMock()), \
         patch.object(mgr, '_send_typing', new=AsyncMock()):
        await mgr.plan_followup(222)
        assert sent and sent[0] == (222, 'followup')
        mgr._send_typing.assert_called()


async def test_admin_commands():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥."""
    print("\n=== –¢–µ—Å—Ç Admin ===")
    import admin as admin_mod

    # –ú–æ–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    girls = MagicMock()
    girls.list_girls = AsyncMock(return_value=[])
    girls.ensure_girl = AsyncMock(side_effect=lambda cid, name: types.SimpleNamespace(chat_id=cid, name=name))
    girls.get_profile = AsyncMock(return_value=None)
    girls.delete_girl = AsyncMock(return_value=True)
    girls.get_profile_context = AsyncMock(return_value="ctx")
    girls.suggest_focus_topic = AsyncMock(return_value="topic")

    sent = []
    async def send_message(cid, text):
        sent.append((cid, text))
    stopped = {"v": False}
    def request_stop():
        stopped["v"] = True

    rg = MagicMock()

    async def resolve_identity(q: str) -> str:
        return f"Resolved: {q}"

    # –ü–∞—Ç—á–∏–º ADMIN_CHAT_ID –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è admin, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã —Å—á–∏—Ç–∞–ª–∏—Å—å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏
    with patch.object(admin_mod, 'ADMIN_CHAT_ID', 555555):
        admin = admin_mod.Admin(girls, send_message, request_stop, rg, resolve_identity)
        aid = 555555

        # !help
        await admin.handle_admin_command(aid, "!help")
        # !id –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await admin.handle_admin_command(aid, "!id")
        # !id c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        await admin.handle_admin_command(aid, "!id @username")

        # !add, !list, !del, !profile
        await admin.handle_admin_command(aid, "!add 12345 Alice")
        await admin.handle_admin_command(aid, "!list")
        await admin.handle_admin_command(aid, "!del 12345")
        await admin.handle_admin_command(aid, "!profile 12345")

        # !start –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥
        with patch.object(admin_mod, 'generate_starter', new=AsyncMock(return_value='hi there')):
            await admin.handle_admin_command(aid, "!start 12345")
        # !stop
        await admin.handle_admin_command(aid, "!stop")

    assert any("hi there" in m[1] for m in sent)
    assert stopped["v"] is True


async def test_girls_manager_end_to_end():
    """E2E —Ç–µ—Å—Ç —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –±—ç–∫–∞–ø–∞."""
    print("\n=== –¢–µ—Å—Ç GirlsManager ===")
    from girls_manager import GirlsManager
    import girls_manager as gm_mod

    with tempfile.TemporaryDirectory() as td:
        data_path = Path(td) / "girls.json"
        gm = GirlsManager(path=str(data_path))
        await gm.load()

        gp = await gm.ensure_girl(42, "Eva")
        assert gp.chat_id == 42

        # –ü—Ä–æ—Ñ–∏–ª—å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await gm.update_profile(42, "–õ—é–±–ª—é –∫–Ω–∏–≥–∏ –∏ —Ä–∞–±–æ—Ç–∞—é –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º. –ù–µ–¥–∞–≤–Ω–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ –°—Ç–∞–º–±—É–ª")
        await gm.update_last_activity(42)

        ctx = await gm.get_profile_context(42)
        assert "interests" in ctx or "work" in ctx or "travel" in ctx

        topic = await gm.suggest_focus_topic(42)
        assert isinstance(topic, str) and topic

        # –ù–∞–∫—Ä—É—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ PROFILE_ANALYZE_EVERY_N
        from config import PROFILE_ANALYZE_EVERY_N
        for _ in range(PROFILE_ANALYZE_EVERY_N - 1):
            await gm.update_last_activity(42)
        sid = await gm.analyze_and_summarize(42, [{"text": "interests and values"}])
        assert sid is not None

        # –ë—ç–∫–∞–ø –≤ —Å–≤–æ—é –ø–∞–ø–∫—É, –ø–∞—Ç—á–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –º–æ–¥—É–ª—è
        with patch.object(gm_mod, 'BACKUPS_DIR', str(Path(td) / 'bk')):
            p = await gm.backup_daily_chat(42, [{"text": "hi"}])
            assert p.exists()


async def test_logger_append_and_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –∏ –∑–∞–ø–∏—Å–∏ –¥–∏–∞–ª–æ–≥–æ–≤."""
    print("\n=== –¢–µ—Å—Ç Logger ===")
    import logger as logmod

    logmod.setup_logging()
    root = __import__('logging').getLogger()
    assert root.handlers

    with tempfile.TemporaryDirectory() as td:
        with patch.object(logmod, 'CONVERSATIONS_DIR', td):
            await logmod.append_conversation(123, {"direction": "in", "text": "hello"})
            p = Path(td) / "123.json"
            assert p.exists()
            data = json.loads(p.read_text(encoding='utf-8'))
            assert isinstance(data, list) and data and data[0]["text"] == "hello"


async def test_shutdown_handler():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Shutdown.request_stop()/wait()."""
    print("\n=== –¢–µ—Å—Ç Shutdown ===")
    from shutdown_handler import Shutdown
    sh = Shutdown()
    # install –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º
    try:
        sh.install()
    except Exception:
        pass
    sh.request_stop()
    await sh.wait()
    assert sh.is_stopping() is True


async def test_config_basics():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ config."""
    print("\n=== –¢–µ—Å—Ç config ===")
    import config as cfg
    assert isinstance(cfg.OPENAI_MODEL, str)
    assert isinstance(cfg.HISTORY_LIMIT, int)
    assert 0 < cfg.OPENAI_MAX_TOKENS
    assert 0.0 <= cfg.OPENAI_TEMPERATURE <= 2.0


async def test_main_smoke():
    """–õ—ë–≥–∫–∏–π smoke-—Ç–µ—Å—Ç: –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, —Ñ—É–Ω–∫—Ü–∏—è main —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    print("\n=== Smoke main ===")
    import importlib
    m = importlib.import_module('main')
    assert hasattr(m, 'main') and asyncio.iscoroutinefunction(m.main)


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ResponseGenerator\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    test_real_api = "--real-api" in sys.argv

    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ (–≤—Å–µ–≥–¥–∞)
    await test_config_validation()
    await test_basic_generation()
    await test_fallback_without_client()
    await test_history_management()
    await test_error_handling()
    await test_complex_context()
    await test_conversation_flow()

    # –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –º–æ–¥—É–ª—è–º
    await test_conversation_initiator_time_of_day_and_generate()
    await test_autonomous_manager_tick_and_followup()
    await test_admin_commands()
    await test_girls_manager_end_to_end()
    await test_logger_append_and_setup()
    await test_shutdown_handler()
    await test_config_basics()
    await test_main_smoke()

    # –†–µ–∞–ª—å–Ω—ã–µ API —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if test_real_api:
        print("\n" + "="*50)
        print("üåê –¢–ï–°–¢–´ –†–ï–ê–õ–¨–ù–û–ì–û API")
        print("="*50)

        api_works = await test_real_api_connection()
        if api_works:
            await test_api_with_full_context()
    else:
        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python test.py --real-api")

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())
