"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–µ–≤—É—à–µ–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤ Telegram.
–ö–æ–º–∞–Ω–¥—ã (–¥–ª—è ADMIN_CHAT_ID):
- !help - –ø–æ–º–æ—â—å
- !status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –º–µ—Ç—Ä–∏–∫–∏
- !list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π 
- !add <chat_id> <name> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
- !del <chat_id> - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
- !profile <chat_id> - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
- !start <chat_id> - –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥
- !id [query] - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
- !metrics - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
- !restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
- !stop - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
"""
from __future__ import annotations

import logging
from typing import Awaitable, Callable, Optional
import json

from config import ADMIN_CHAT_ID
from girls_manager import GirlsManager
from conversation_initiator import generate_starter
from exceptions import handle_exception
from validators import Validator
from metrics import metrics_collector

logger = logging.getLogger(__name__)


class Admin:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    
    def __init__(
        self,
        girls: GirlsManager,
        send_message: Callable[[int, str], Awaitable[None]],
        request_stop: Callable[[], None],
        rg,  # ResponseGenerator
        resolve_identity: Callable[[str], Awaitable[str]] | None = None,
    ) -> None:
        self._girls = girls
        self._send = send_message
        self._request_stop = request_stop
        self._rg = rg
        self._resolve_identity = resolve_identity
        
        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∫–∏
        self._commands = {
            "!help": self._cmd_help,
            "!status": self._cmd_status,
            "!list": self._cmd_list,
            "!add": self._cmd_add,
            "!del": self._cmd_delete,
            "!profile": self._cmd_profile,
            "!start": self._cmd_start,
            "!id": self._cmd_id,
            "!metrics": self._cmd_metrics,
            "!restart": self._cmd_restart,
            "!stop": self._cmd_stop,
        }

    async def handle_admin_command(self, chat_id: int, text: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞."""
        if chat_id != ADMIN_CHAT_ID:
            return False
            
        try:
            parts = text.strip().split()
            if not parts:
                return True
                
            cmd = parts[0].lower()
            if cmd not in self._commands:
                await self._send(chat_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !help")
                return True
                
            await self._commands[cmd](chat_id, parts)
            return True
            
        except Exception as e:
            handle_exception(e, "admin_command", command=text)
            await self._send(chat_id, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            return True

    async def _cmd_help(self, chat_id: int, parts: list) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏."""
        help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ `!status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `!metrics` - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ `!list` - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
‚Ä¢ `!profile <chat_id>` - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å

üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏:**
‚Ä¢ `!add <chat_id> <name>` - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ `!del <chat_id>` - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ `!start <chat_id>` - –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥

üîç **–£—Ç–∏–ª–∏—Ç—ã:**
‚Ä¢ `!id [query]` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ `!restart` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ `!stop` - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞

üí° **–ü—Ä–∏–º–µ—Ä—ã:**
`!add 123456789 –ê–Ω–Ω–∞`
`!id @username`
`!profile 123456789`
        """
        await self._send(chat_id, help_text)

    async def _cmd_status(self, chat_id: int, parts: list) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        try:
            summary = metrics_collector.get_summary()
            
            status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

‚è± **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {summary['uptime']}

üì± **Telegram:** {summary['status']['telegram']}
üß† **OpenAI:** {summary['status']['openai']}

üìä **–°–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {summary['messages']['received']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {summary['messages']['sent']}
‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {summary['messages']['ratio']:.2f}

üîÑ **API –∑–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—Å–µ–≥–æ: {summary['api']['requests']}
‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['api']['failures']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['api']['success_rate']}

‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {summary['performance']['avg_response_time']}
‚Ä¢ –ü–∞–º—è—Ç—å: {summary['performance']['memory_usage']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {summary['performance']['active_chats']}

‚ùå **–û—à–∏–±–∫–∏:** {summary['errors']}
            """
            await self._send(chat_id, status_text)
            
        except Exception as e:
            await self._send(chat_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def _cmd_list(self, chat_id: int, parts: list) -> None:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        try:
            girls = await self._girls.list_girls()
            if not girls:
                await self._send(chat_id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
                return
                
            lines = ["üë• **–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:**\n"]
            for i, g in enumerate(girls, 1):
                last_activity = ""
                if g.last_activity:
                    from datetime import datetime
                    try:
                        dt = datetime.fromisoformat(g.last_activity.replace('Z', '+00:00'))
                        last_activity = f" (üïê {dt.strftime('%d.%m %H:%M')})"
                    except:
                        pass
                        
                lines.append(f"{i}. `{g.chat_id}` ‚Äî {g.name or '–±–µ–∑ –∏–º–µ–Ω–∏'}{last_activity}")
                
            await self._send(chat_id, "\n".join(lines))
            
        except Exception as e:
            await self._send(chat_id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")

    async def _cmd_add(self, chat_id: int, parts: list) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."""
        if len(parts) < 3:
            await self._send(chat_id, "‚ùå –§–æ—Ä–º–∞—Ç: `!add <chat_id> <name>`")
            return
            
        try:
            target_id = Validator.validate_chat_id(parts[1])
            name = " ".join(parts[2:])
            name = Validator.validate_name(name)
            
            gp = await self._girls.ensure_girl(target_id, name)
            await self._send(chat_id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: `{gp.chat_id}` ‚Äî {gp.name}")
            
        except Exception as e:
            await self._send(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")

    async def _cmd_delete(self, chat_id: int, parts: list) -> None:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."""
        if len(parts) != 2:
            await self._send(chat_id, "‚ùå –§–æ—Ä–º–∞—Ç: `!del <chat_id>`")
            return
            
        try:
            target_id = Validator.validate_chat_id(parts[1])
            ok = await self._girls.delete_girl(target_id)
            
            if ok:
                await self._send(chat_id, f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å `{target_id}` —É–¥–∞–ª—ë–Ω")
            else:
                await self._send(chat_id, f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å `{target_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            await self._send(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    async def _cmd_profile(self, chat_id: int, parts: list) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."""
        if len(parts) != 2:
            await self._send(chat_id, "‚ùå –§–æ—Ä–º–∞—Ç: `!profile <chat_id>`")
            return
            
        try:
            target_id = Validator.validate_chat_id(parts[1])
            gp = await self._girls.get_profile(target_id)
            
            if not gp:
                await self._send(chat_id, f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å `{target_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            profile_text = f"""
üë§ **–ü—Ä–æ—Ñ–∏–ª—å {gp.chat_id}**

üìù **–ò–º—è:** {gp.name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üìä **–°–æ–æ–±—â–µ–Ω–∏–π:** {gp.message_count}
üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {gp.last_activity or '–Ω–∏–∫–æ–≥–¥–∞'}

üìã **–°–≤–æ–¥–∫–∏:** {len(gp.summary)}
üß† **–°–Ω–∏–º–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è:** {len(gp.profile)}

üíæ **–î–∞–Ω–Ω—ã–µ:** ```json
{json.dumps(gp.to_dict(), ensure_ascii=False, indent=2)[:800]}
```
            """
            await self._send(chat_id, profile_text)
            
        except Exception as e:
            await self._send(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    async def _cmd_start(self, chat_id: int, parts: list) -> None:
        """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥."""
        if len(parts) != 2:
            await self._send(chat_id, "‚ùå –§–æ—Ä–º–∞—Ç: `!start <chat_id>`")
            return
            
        try:
            target_id = Validator.validate_chat_id(parts[1])
            
            existing = await self._girls.get_profile(target_id)
            is_new = existing is None
            
            if is_new:
                await self._girls.ensure_girl(target_id, "")
                
            profile_context = await self._girls.get_profile_context(target_id)
            focus_topic = await self._girls.suggest_focus_topic(target_id)
            starter = await generate_starter(self._rg, target_id, profile_context, focus_topic)
            
            await self._send(target_id, starter)
            
            status = "–Ω–æ–≤—ã–π" if is_new else "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"
            await self._send(chat_id, f"‚úÖ –î–∏–∞–ª–æ–≥ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —Å `{target_id}` ({status})")
            
        except Exception as e:
            await self._send(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")

    async def _cmd_id(self, chat_id: int, parts: list) -> None:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        if len(parts) == 1:
            await self._send(chat_id, f"üÜî –í–∞—à chat_id: `{chat_id}`")
            return
            
        if not self._resolve_identity:
            await self._send(chat_id, "‚ùå –†–µ–∑–æ–ª–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        query = parts[1]
        try:
            info = await self._resolve_identity(query)
            await self._send(chat_id, f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:**\n{info}")
        except Exception as e:
            await self._send(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

    async def _cmd_metrics(self, chat_id: int, parts: list) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            metrics = metrics_collector.get_metrics()
            
            metrics_text = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**

‚è± **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {metrics.uptime_formatted}
üì± **–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {metrics.messages_received}
üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {metrics.messages_sent}
üîÑ **API –∑–∞–ø—Ä–æ—Å–æ–≤:** {metrics.api_requests}
‚ùå **API –æ—à–∏–±–æ–∫:** {metrics.api_failures}
üêõ **–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:** {metrics.errors_count}
üë• **–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:** {metrics.active_chats}

‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.avg_response_time:.2f}s
‚Ä¢ –ü–∞–º—è—Ç—å: {metrics.memory_usage_mb:.1f}MB
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å API: {metrics.success_rate:.1f}%

üîó **–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:**
‚Ä¢ Telegram: {'‚úÖ' if metrics.telegram_connected else '‚ùå'}
‚Ä¢ OpenAI: {'‚úÖ' if metrics.openai_available else '‚ùå'}
            """
            await self._send(chat_id, metrics_text)
            
        except Exception as e:
            await self._send(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

    async def _cmd_restart(self, chat_id: int, parts: list) -> None:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        await self._send(chat_id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

    async def _cmd_stop(self, chat_id: int, parts: list) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        await self._send(chat_id, "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ...")
        self._request_stop()
