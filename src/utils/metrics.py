"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –±–æ—Ç–∞ Han.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ—à–∏–±–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
"""
from __future__ import annotations

import asyncio
import json
import logging
import time
from dataclasses import dataclass, field, asdict
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any

import aiofiles

logger = logging.getLogger(__name__)


@dataclass
class SystemMetrics:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞."""
    start_time: float = field(default_factory=time.time)
    messages_received: int = 0
    messages_sent: int = 0
    api_requests: int = 0
    api_failures: int = 0
    errors_count: int = 0
    active_chats: int = 0
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    avg_response_time: float = 0.0
    memory_usage_mb: float = 0.0
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    telegram_connected: bool = False
    openai_available: bool = False
    
    @property
    def uptime_seconds(self) -> float:
        """–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        return time.time() - self.start_time
    
    @property 
    def uptime_formatted(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã."""
        uptime = self.uptime_seconds
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        seconds = int(uptime % 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤."""
        total = self.api_requests
        if total == 0:
            return 100.0
        return ((total - self.api_failures) / total) * 100


class MetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ—Ç—Ä–∏–∫."""
    
    def __init__(self, metrics_file: str = "metrics.json"):
        self.metrics = SystemMetrics()
        self.metrics_file = Path(metrics_file)
        self._lock = asyncio.Lock()
        self._history: List[Dict[str, Any]] = []
        self._last_save = time.time()
        self._save_interval = 300  # 5 –º–∏–Ω—É—Ç
        
    def increment_messages_received(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.metrics.messages_received += 1
        
    def increment_messages_sent(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.metrics.messages_sent += 1
        
    def increment_api_requests(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤."""
        self.metrics.api_requests += 1
        
    def increment_api_failures(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤."""
        self.metrics.api_failures += 1
        
    def increment_errors(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        self.metrics.errors_count += 1
        
    def update_active_chats(self, count: int) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤."""
        self.metrics.active_chats = count
        
    def update_response_time(self, response_time: float) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞."""
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        alpha = 0.1
        self.metrics.avg_response_time = (
            alpha * response_time + (1 - alpha) * self.metrics.avg_response_time
        )
        
    def update_memory_usage(self, memory_mb: float) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏."""
        self.metrics.memory_usage_mb = memory_mb
        
    def set_telegram_status(self, connected: bool) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram."""
        self.metrics.telegram_connected = connected
        
    def set_openai_status(self, available: bool) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI."""
        self.metrics.openai_available = available
        
    def get_metrics(self) -> SystemMetrics:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        return self.metrics
        
    def get_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫."""
        return {
            "uptime": self.metrics.uptime_formatted,
            "messages": {
                "received": self.metrics.messages_received,
                "sent": self.metrics.messages_sent,
                "ratio": (
                    self.metrics.messages_sent / max(self.metrics.messages_received, 1)
                )
            },
            "api": {
                "requests": self.metrics.api_requests,
                "failures": self.metrics.api_failures,
                "success_rate": f"{self.metrics.success_rate:.1f}%"
            },
            "performance": {
                "avg_response_time": f"{self.metrics.avg_response_time:.2f}s",
                "memory_usage": f"{self.metrics.memory_usage_mb:.1f}MB",
                "active_chats": self.metrics.active_chats
            },
            "status": {
                "telegram": "üü¢" if self.metrics.telegram_connected else "üî¥",
                "openai": "üü¢" if self.metrics.openai_available else "üî¥"
            },
            "errors": self.metrics.errors_count
        }
        
    async def save_metrics(self, force: bool = False) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª."""
        now = time.time()
        if not force and (now - self._last_save) < self._save_interval:
            return
            
        async with self._lock:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–Ω–∏–º–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏—é
                snapshot = {
                    "timestamp": datetime.now().isoformat(),
                    "metrics": asdict(self.metrics)
                }
                self._history.append(snapshot)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 288 –∑–∞–ø–∏—Å–µ–π = 24 —á–∞—Å–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 5 –º–∏–Ω)
                if len(self._history) > 288:
                    self._history = self._history[-288:]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                data = {
                    "current": asdict(self.metrics),
                    "history": self._history
                }
                
                async with aiofiles.open(self.metrics_file, "w", encoding="utf-8") as f:
                    await f.write(json.dumps(data, ensure_ascii=False, indent=2))
                
                self._last_save = now
                logger.debug(f"–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.metrics_file}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
                
    async def load_metrics(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
        if not self.metrics_file.exists():
            return
            
        try:
            async with aiofiles.open(self.metrics_file, "r", encoding="utf-8") as f:
                content = await f.read()
                data = json.loads(content)
                
            if "history" in data:
                self._history = data["history"]
                
            logger.info(f"–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {self.metrics_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            
    def get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë."""
        try:
            import psutil
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024
        except ImportError:
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            return 0.0
            
    async def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                memory_usage = self.get_memory_usage()
                self.update_memory_usage(memory_usage)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                await self.save_metrics()
                
                # –ñ–¥—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(self._save_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
metrics_collector = MetricsCollector()
