"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: Telethon –∫–ª–∏–µ–Ω—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI,
–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –∏ graceful shutdown.
–í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
"""
from __future__ import annotations

import asyncio
import logging
import random
import time
from typing import Optional, Dict, Any, List, Callable
from pathlib import Path

from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from telethon.tl.functions.messages import SetTypingRequest
from telethon.tl.types import SendMessageTypingAction

from src.core.admin import Admin
from src.core.autonomous_manager import AutonomousManager
from src.config.config import DELAYS, WAIT_FOR_MORE_SECONDS
from src.core.girls_manager import GirlsManager
from src.utils.logger import append_conversation, setup_logging
from src.core.response_generator import ResponseGenerator
from src.utils.shutdown_handler import Shutdown
from src.utils.exceptions import HanBotError, TelegramError, handle_exception
from src.utils.validators import Validator

logger = logging.getLogger("main")


async def async_input(prompt: str = "") -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π input, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª (–∏—Å–ø. —Ç–æ–ª—å–∫–æ –¥–ª—è 2FA)."""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, lambda: input(prompt))


async def process_user_message(
    chat_id: int, text: str, name: str,
    girls: GirlsManager, rg: ResponseGenerator,
    pending_timers: Dict[int, asyncio.Task],
    series_buffer: Dict[int, List[str]],
    send_message: Callable, send_typing: Callable,
    autonomous: Optional[AutonomousManager],
    client: TelegramClient
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    start_time = time.time()
    
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await girls.ensure_girl(chat_id, name)
        await girls.update_last_activity(chat_id)
        await girls.update_profile(chat_id, text)

        # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        buf = series_buffer.setdefault(chat_id, [])
        buf.append(text)
        
        # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        prev_task = pending_timers.get(chat_id)
        if prev_task and not prev_task.done():
            prev_task.cancel()

        async def delayed_process():
            """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
            try:
                await asyncio.sleep(WAIT_FOR_MORE_SECONDS)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                profile_context = await girls.get_profile_context(chat_id)
                focus_topic = await girls.suggest_focus_topic(chat_id)
                latest_summary = await girls.get_latest_summary_text(chat_id)

                # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞
                delay = random.randint(DELAYS.min_reply_delay, DELAYS.max_reply_delay)
                await client.send_read_acknowledge(chat_id)
                await send_typing(chat_id, delay * 60)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                series_text = "\n".join(series_buffer.get(chat_id, []))
                reply = await rg.generate(
                    chat_id=chat_id,
                    user_message=series_text,
                    profile_context=profile_context,
                    focus_topic=focus_topic,
                    summary_text=latest_summary,
                )
                
                await send_message(chat_id, reply)

                # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
                series_buffer[chat_id] = []

                # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ follow-up
                if autonomous:
                    asyncio.create_task(autonomous.plan_followup(chat_id))

                # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                recent = rg.get_recent_history(chat_id)[-10:]
                summary_id = await girls.analyze_and_summarize(chat_id, recent)
                if summary_id:
                    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ %s –¥–ª—è %s", summary_id, chat_id)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
                response_time = time.time() - start_time
                from src.utils.metrics import metrics_collector
                metrics_collector.update_response_time(response_time)

            except asyncio.CancelledError:
                pass
            except Exception as e:
                handle_exception(e, "delayed_process", chat_id=chat_id)

        # –ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        pending_timers[chat_id] = asyncio.create_task(delayed_process())
        
    except Exception as e:
        handle_exception(e, "process_user_message", chat_id=chat_id)


async def run_backup_loop(girls: GirlsManager, shutdown: Shutdown) -> None:
    """–¶–∏–∫–ª –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤."""
    while not shutdown.is_stopping():
        try:
            girls_list = await girls.list_girls()
            for g in girls_list:
                if shutdown.is_stopping():
                    break
                    
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
                from pathlib import Path
                import json
                import aiofiles
                from src.config.config import CONVERSATIONS_DIR
                
                conv_file = Path(CONVERSATIONS_DIR) / f"{g.chat_id}.json"
                messages = []
                
                if conv_file.exists():
                    try:
                        async with aiofiles.open(conv_file, "r", encoding="utf-8") as f:
                            content = await f.read()
                            if content.strip():
                                messages = json.loads(content)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ {g.chat_id}: {e}")
                        
                await girls.backup_daily_chat(g.chat_id, messages)
                
            logger.info(f"–ë—ç–∫–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è {len(girls_list)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
            
        except Exception as e:
            handle_exception(e, "backup_loop")
            
        # –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞
        await asyncio.sleep(60 * 60 * 24)


async def main(config=None) -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º.
    
    Args:
        config: Configuration object. If None, will load from environment.
    """
    setup_logging()
    logger.info("–ó–∞–ø—É—Å–∫ Han Dating Bot...")
    
    # Load configuration if not provided
    if config is None:
        from src.config.config import Config
        config = Config.from_env()
    
    # Import configuration values
    ADMIN_CHAT_ID = config.admin_chat_id
    SESSION_NAME = config.telegram.session_name
    TELEGRAM_API_ID = config.telegram.api_id
    TELEGRAM_API_HASH = config.telegram.api_hash
    TELEGRAM_PHONE = config.telegram.phone
    
    # –ò–º–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    from src.utils.metrics import metrics_collector
    from src.core.connection_manager import ConnectionManager
    
    # Database Integration (Phase 1)
    from src.database.integration import init_database_integration, shutdown_database_integration
    from src.database.girls_adapter import create_database_adapter
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Database Integration
        logger.info("üöÄ Initializing Database Integration...")
        db_initialized = await init_database_integration(
            bot_id="han_dating_bot", 
            enable_migration=False  # Start with JSON fallback, enable migration manually
        )
        
        if db_initialized:
            logger.info("‚úÖ Database Integration initialized successfully")
        else:
            logger.warning("‚ö†Ô∏è Database Integration failed, using JSON fallback")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        girls = GirlsManager()
        
        # Create database adapter for GirlsManager
        if db_initialized:
            girls_adapter = await create_database_adapter(girls)
            logger.info("‚úÖ Database adapter for GirlsManager created")
        else:
            girls_adapter = None
            logger.info("Using traditional GirlsManager without database integration")
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–æ–≤—ã–π girls_manager –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        
        rg = ResponseGenerator(girls)
        shutdown = Shutdown()
        shutdown.install()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
        await metrics_collector.load_metrics()
        monitoring_task = asyncio.create_task(metrics_collector.start_monitoring())
        
        # Telethon –∫–ª–∏–µ–Ω—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        client = TelegramClient(SESSION_NAME, TELEGRAM_API_ID, TELEGRAM_API_HASH)
        connection_manager = ConnectionManager(client, TELEGRAM_PHONE)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –¥–µ–±–∞—É–Ω—Å
        entity_cache: Dict[int, Any] = {}
        pending_timers: Dict[int, asyncio.Task] = {}
        series_buffer: Dict[int, List[str]] = {}
        
        async def resolve_peer(chat_id: int):
            """–†–µ–∑–æ–ª–≤ peer —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
            if chat_id in entity_cache:
                return entity_cache[chat_id]
            try:
                ent = await client.get_input_entity(chat_id)
                entity_cache[chat_id] = ent
                return ent
            except Exception as e:
                logger.warning(f"Failed to resolve peer {chat_id}: {e}")
                return chat_id

        async def resolve_identity(query: str) -> str:
            """–†–µ–∑–æ–ª–≤ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
            q = query.strip()
            try:
                if q.startswith('@') or 't.me/' in q:
                    # Username –∏–ª–∏ —Å—Å—ã–ª–∫–∞
                    username = q.replace('@', '').replace('t.me/', '')
                    entity = await client.get_entity(username)
                elif q.startswith('+') or q.isdigit():
                    # –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ ID
                    entity = await client.get_entity(q)
                else:
                    return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {q}"
                    
                user_type = "User" if hasattr(entity, 'phone') else "Chat"
                username_info = f"@{entity.username}" if hasattr(entity, 'username') and entity.username else "no username"
                name = getattr(entity, 'first_name', '') or getattr(entity, 'title', 'No name')
                
                return f"type={user_type}; id={entity.id}; username={username_info}; name={name}"
                
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

        async def send_message(chat_id: int, text: str) -> None:
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
            try:
                chat_id = Validator.validate_chat_id(chat_id)
                text = Validator.validate_message_text(text)
                
                peer = await resolve_peer(chat_id)
                await client.send_message(peer, text)
                
                metrics_collector.increment_messages_sent()
                await append_conversation(chat_id, {"direction": "out", "text": text})
                logger.debug(f"Sent message to {chat_id}: {text[:50]}...")
                
            except Exception as e:
                handle_exception(e, "send_message", chat_id=chat_id, text_length=len(text))
                raise TelegramError(f"Failed to send message: {str(e)}")

        async def send_typing(chat_id: int, seconds: int) -> None:
            """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞."""
            try:
                peer = await resolve_peer(chat_id)
                await client(SetTypingRequest(peer, SendMessageTypingAction()))
                await asyncio.sleep(min(seconds, 60))  # –õ–∏–º–∏—Ç 60 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.debug(f"Failed to send typing indicator to {chat_id}: {e}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        admin = Admin(girls, send_message, shutdown.request_stop, rg, resolve_identity)
        autonomous: Optional[AutonomousManager] = None

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        async def password_prompt() -> str:
            return await async_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")

        connected = await connection_manager.connect_with_retry(password_prompt)
        if not connected:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            return

        metrics_collector.set_telegram_status(True)
        metrics_collector.set_openai_status(bool(rg._client))
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @client.on(events.NewMessage(incoming=True))
        async def handler(event):
            """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
            try:
                # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if not event.message or not event.message.message:
                    return
                    
                sender = event.sender
                if sender and getattr(sender, "bot", False):
                    return

                chat_id = event.sender_id
                text = event.message.message.strip()
                name = (getattr(sender, "first_name", None) or "").strip()

                # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ entity
                try:
                    if event.input_sender:
                        entity_cache[chat_id] = event.input_sender
                except Exception:
                    pass

                # –í–∞–ª–∏–¥–∞—Ü–∏—è
                chat_id = Validator.validate_chat_id(chat_id)
                text = Validator.validate_message_text(text)
                name = Validator.validate_name(name)

                # –ú–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                metrics_collector.increment_messages_received()
                await append_conversation(chat_id, {"direction": "in", "text": text})
                logger.info(f"Message from {chat_id} ({name}): {text[:100]}...")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
                girls_list = await girls.list_girls()
                metrics_collector.update_active_chats(len(girls_list))

                # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
                if await admin.handle_admin_command(chat_id, text):
                    return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await process_user_message(
                    chat_id, text, name, girls, rg, 
                    pending_timers, series_buffer,
                    send_message, send_typing, autonomous, client
                )

            except Exception as e:
                metrics_collector.increment_errors()
                handle_exception(e, "message_handler", chat_id=chat_id if 'chat_id' in locals() else None)

        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        autonomous = AutonomousManager(
            girls=girls,
            rg=rg, 
            send_message=send_message,
            is_stopping=shutdown.is_stopping,
            send_typing=send_typing
        )

        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        auto_task = asyncio.create_task(autonomous.start())
        client_task = asyncio.create_task(client.run_until_disconnected())
        backup_task = asyncio.create_task(run_backup_loop(girls, shutdown))
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await shutdown.wait()
        
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): %s", e)
        raise
        
    finally:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # Shutdown Database Integration
        if 'db_initialized' in locals() and db_initialized:
            logger.info("üîΩ Shutting down Database Integration...")
            await shutdown_database_integration()
            logger.info("‚úÖ Database Integration shutdown complete")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if 'monitoring_task' in locals():
            monitoring_task.cancel()
            
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        if 'metrics_collector' in locals():
            await metrics_collector.save_metrics(force=True)
            
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram
        if 'connection_manager' in locals():
            await connection_manager.disconnect()
            
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
